#include "label.h"

Label::Label(){

}

Label::~Label(){
	glDeleteTextures(1, &texID);
}

// OpenGL works best with images where sides are powers of two - odd issues
// can occur with some drivers/hardware when image dimensions are not power of two 
// This function will return the smallest power of two larger than or equal to the
// input parameter
int Label::powerOfTwo(int x) {
	int size = 1;
	while (size < x)
		size *= 2; // Times two will usually be optimised to 'shift right' operation

	return size;
}

bool Label::textToTexture(const char* text, TTF_Font* textFont, SDL_Color colour){
	// First, create a SDL surface with the text
	SDL_Surface *stringImage = NULL;
	

	// A few steps here: the image generated by SDL's text rendering can
	// be of any size, but OpenGL works best with images that are in regular power of two dimensions
	// This code uses SDL to create a texture for a label, then copy that to another texture
	// of appropriate dimensions for use in OpenGL
	stringImage = TTF_RenderText_Blended(textFont, text, colour);

	if (stringImage == NULL)
		return false;
		//exitFatalError("String surface not created.");

	width = powerOfTwo(stringImage->w);
	height = powerOfTwo(stringImage->h);

	SDL_Surface *glImage = NULL;
	glImage = SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 32,
		0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);

	SDL_BlitSurface(stringImage, NULL, glImage, NULL);

	// Copy the SDL surface to an OpenGL texture

	glGenTextures(1, &texID);
	glBindTexture(GL_TEXTURE_2D, texID);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0,
		GL_RGBA, GL_UNSIGNED_BYTE, glImage->pixels);
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
	// SDL surfaces no longer required
	SDL_FreeSurface(stringImage);
	SDL_FreeSurface(glImage);

	return true;
}

void Label::draw(float x, float y){
	// Draw texture here
	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, texID);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	
	glBegin(GL_QUADS);
	glTexCoord2d(0, 1); // Texture has origin at top not bottom
	glVertex3f(x, y, 0.0); // first corner
	glTexCoord2d(1, 1);
	glVertex3f(x + /*0.002f*/width, y, 0.0); // second corner
	glTexCoord2d(1, 0);
	glVertex3f(x + /*0.002f*/width, y + /*0.002f*/height, 0.0); // third corner
	glTexCoord2d(0, 0);
	glVertex3f(x, y + /*0.002f*/height, 0.0); // fourth corner
	glEnd();
	

	// As this texture is not being kept, delete it here
	// For labels that do not change, it would be better to not have to recreate them every
	// frame
	glDisable(GL_TEXTURE_2D);
}
